import streamlit as st
import pandas as pd
import joblib
import matplotlib.pyplot as plt
import seaborn as sns
import os
from pathlib import Path
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.utils import parallel_backend

# Chargement optimis√© du dataset
@st.cache_data
def load_data():
    current_dir = Path.cwd()
    csv_path = current_dir / "eco2mix-regional-cons-def.csv"
    try:
        cols = [
            "Date - Heure", "R√©gion", "Consommation (MW)", "Thermique (MW)", "Nucl√©aire (MW)", 
            "Eolien (MW)", "Solaire (MW)", "Hydraulique (MW)", "Bio√©nergies (MW)", "Pompage (MW)"

        ]
        df = pd.read_csv(csv_path, sep=';', usecols=cols, low_memory=False)
        return df
    except Exception as e:
        st.error(f"Erreur lors de la lecture du fichier CSV : {e}")
        return None

# Charger le mod√®le pr√©-entra√Æn√©
@st.cache_resource
def load_model():
    try:
        return joblib.load("random_forest_model.pkl")
    except FileNotFoundError:
        st.error("Le mod√®le n'a pas √©t√© trouv√©.")
        return None

# Charger les donn√©es et le mod√®le
df = load_data()
model = load_model()


# Titre principal
st.title("‚ö° Pr√©diction de la consommation √©lectrique en France")

# **Ajout de la navigation dans la barre lat√©rale**
with st.sidebar:
    st.title("üóÇÔ∏è Navigation")

# Navigation
pages = ["üìò Introduction", "üîç Exploration des donn√©es", "üìä Analyse", "ü§ñ Mod√©lisation"]
page = st.sidebar.radio("Aller vers", pages)

# Page Introduction
if page == pages[0]:
    st.write("## üìò Introduction")
    st.write(
        """
        Cette application pr√©sente une analyse des donn√©es √©lectriques en France et une d√©monstration de 
        mod√®le de machine learning pour pr√©dire la consommation. Vous pourrez explorer les donn√©es, 
        examiner des visualisations cl√©s, et comprendre les facteurs influen√ßant la consommation.
        """
    )

# Page Exploration du jeu de donn√©es
elif page == pages[1]:
    st.write("## üîç Exploration")
    st.write("")  # Espace visuel
    if df is not None:
        st.write("### Aper√ßu du dataset")
        st.dataframe(df.sample(10))

        st.write("")  # Espace visuel

        st.write("### Dimensions")
        st.write(f"Lignes : {df.shape[0]}, Colonnes : {df.shape[1]}")

        st.write("")  # Espace visuel

        st.write("### Statistiques descriptives")
        st.write(df.describe())

        st.write("")  # Espace visuel

        st.write("### Valeurs manquantes")
        missing_values = df.isna().sum()
        cols_with_na = missing_values[missing_values > 0]
        if not cols_with_na.empty:
            st.write(cols_with_na)
        else:
            st.write("Aucune valeur manquante d√©tect√©e.")
    else:
        st.error("Le dataset n'a pas pu √™tre charg√©.")

# Page Analyse et visualisations
elif page == pages[2]:
    st.write("## üìä Analyse")
    st.write("")  # Espace visuel
    st.write("")  # Espace visuel

    if df is not None:
        # Convertir les colonnes en num√©rique
        colonnes_production = ["Thermique (MW)", "Nucl√©aire (MW)", "Eolien (MW)", "Solaire (MW)", 
                               "Hydraulique (MW)", "Bio√©nergies (MW)","Pompage (MW)"]
        for col in colonnes_production:
            df[col] = pd.to_numeric(df[col], errors='coerce')

        # Calculer la production totale
        df["Production_Totale"] = df[colonnes_production].sum(axis=1)

        # Conversion de la colonne date
        df["Date - Heure"] = pd.to_datetime(df["Date - Heure"], errors="coerce")
        df["Ann√©e"] = df["Date - Heure"].dt.year
        df["Mois"] = df["Date - Heure"].dt.month

        st.write("")  # Espace visuel

        # Comparaison production vs consommation
        st.write("### Production vs Consommation")
        comparaison = df[["Date - Heure", "Production_Totale", "Consommation (MW)"]].set_index("Date - Heure")
        comparaison_annuelle = comparaison.resample("Y").mean()

        fig, ax = plt.subplots(figsize=(10, 5))
        comparaison_annuelle.plot(kind="bar", ax=ax, color=["blue", "orange"])
        ax.set_xlabel("Ann√©e")
        ax.set_ylabel("Moyenne annuelle (MW)")
        st.pyplot(fig)

        st.write("")  # Espace visuel
        st.write("")  # Espace visuel
        st.write("")  # Espace visuel

        # Matrice de corr√©lation
        st.write("### Corr√©lation")
        colonnes_analyse = ["Consommation (MW)", "Production_Totale"] + colonnes_production
        correlation_matrix = df[colonnes_analyse].corr()

        fig, ax = plt.subplots(figsize=(10, 5))
        sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm", center=0, ax=ax)
        st.pyplot(fig)
        st.write("")  # Espace visuel
        st.write("")  # Espace visuel

        st.write("## Justification des variables utilis√©es pour pr√©dire la consommation")
        st.write("")  # Espace visuel

        st.write("""
                    La matrice de corr√©lation montre que les diff√©rentes sources de production d'√©nergie ont des relations vari√©es avec la consommation. 
                    Nous avons choisi les variables suivantes pour la pr√©diction : **Thermique**, **Nucl√©aire**, **√âolien**, **Solaire**, **Hydraulique**, 
                    **Bio√©nergies**, et **Pompage**. 

                    - Les sources telles que les **bio√©nergies** (corr√©lation : 0.59), l'**hydraulique** (0.44) et le **thermique** (0.33) 
                    sont fortement corr√©l√©es √† la consommation.
                    - La **production nucl√©aire** est stable mais reste un facteur cl√© (corr√©lation : 0.21).
                         Bien que les √©nergies renouvelables comme l'**√©olien** (0.059) et le **solaire** (0.04) aient des corr√©lations plus faibles, elles permettent de capturer les variations saisonni√®res.
                    - Enfin, la variable **Pompage** (corr√©lation : -0.19) est utile pour mod√©liser les effets inverses li√©s au stockage d'√©nergie.

                    Ces variables permettent ainsi de mieux repr√©senter les dynamiques entre production et consommation √©nerg√©tique.
                """)


# Page Mod√©lisation
elif page == pages[3]:
    st.write("## ü§ñ Mod√©lisation")
    st.write("")  # Espace visuel
    st.write("")  # Espace visuel
    if model is not None:
        st.write(
            """
            Cette section pr√©sente une d√©monstration du mod√®le de machine learning entra√Æn√© pour pr√©dire 
            la consommation √©lectrique de l'ann√©e 2019 √† partir des donn√©es de production.
            """
        )
        st.write("")  # Espace visuel
        st.write("")  # Espace visuel
        st.write("### Visualisation des pr√©dictions")
        st.write("")  # Espace visuel
        st.write("")  # Espace visuel
        st.write("")  # Espace visuel

        # Chemin du fichier CSV pour la sauvegarde
        predictions_file = "predictions_2019.csv"
        def load_or_predict(df, model):
            if os.path.exists(predictions_file):
               return joblib.load(predictions_file) 

            

        # Pr√©parer les donn√©es pour la pr√©diction
        X_production = df[["Thermique (MW)", "Nucl√©aire (MW)", "Eolien (MW)", "Solaire (MW)", 
                               "Hydraulique (MW)", "Bio√©nergies (MW)","Pompage (MW)"]]

        X_production = X_production.replace('ND', 0)    
        X_production = X_production.replace('-', 0) 
        X_production = X_production.fillna(0)
        df["Date - Heure"] = pd.to_datetime(df["Date - Heure"], errors='coerce')

                  

        # Faire les pr√©dictions
        y_pred = model.predict(X_production)

        # Ajouter les pr√©dictions au DataFrame
        df["Consommation Pr√©dite"] = y_pred

        # Filtrer les donn√©es pour une visualisation plus claire (par exemple, une ann√©e sp√©cifique)
        df_filtered = df[df["Date - Heure"].dt.year == 2019]
        df_filtered["Mois"] = df_filtered["Date - Heure"].dt.to_period("M")
        df_grouped = df_filtered.groupby("Mois")[["Consommation (MW)", "Consommation Pr√©dite"]].mean().reset_index()

        

        # Visualisation des consommations r√©elle et pr√©dite
        st.write("### Comparaison entre consommation r√©elle et pr√©dite (ann√©e 2019)")

        # Cr√©ation du graphique avec des dimensions adapt√©es
        fig, ax = plt.subplots(figsize=(10, 6))
        ax.bar(df_grouped["Mois"].astype(str), df_grouped["Consommation (MW)"], width=0.4, label="Consommation r√©elle", color="blue", align='center')
        ax.bar(df_grouped["Mois"].astype(str), df_grouped["Consommation Pr√©dite"], width=0.4, label="Consommation pr√©dite", color="orange", align='edge')
        ax.set_xlabel("Mois", fontsize=12)
        ax.set_ylabel("Consommation moyenne (MW)", fontsize=12)
        ax.set_title("Comparaison entre consommation r√©elle et pr√©dite par mois (2019)", fontsize=14)
        ax.legend(loc="upper right", fontsize=12)
        plt.xticks(rotation=45)
        ax.grid(True, linestyle='--', alpha=0.5)

        st.pyplot(fig)


        st.write("")  # Espace visuel

        # Affichage des m√©triques d'√©valuation du mod√®le
        st.write("### √âvaluation du mod√®le")
        df_eval = df_filtered[["Consommation (MW)", "Consommation Pr√©dite"]].dropna()
        mse = mean_squared_error(df_eval["Consommation (MW)"], df_eval["Consommation Pr√©dite"])
        r2 = r2_score(df_eval["Consommation (MW)"], df_eval["Consommation Pr√©dite"])
        st.write(f"Erreur quadratique moyenne (MSE) : {mse:.2f}")
        st.write(f"Score R¬≤ : {r2:.2f}")
