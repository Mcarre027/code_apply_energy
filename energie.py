import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os
import plotly.express as px
import plotly.graph_objects as go
from pathlib import Path
from sklearn.metrics import mean_squared_error, r2_score

# Chargement optimis√© du dataset
@st.cache_data
def load_data():
    current_dir = Path.cwd()
    csv_path = current_dir / "eco2mix-regional-cons-def.csv"
    try:
        cols = [
            "Date - Heure", "R√©gion", "Consommation (MW)", "Thermique (MW)", "Nucl√©aire (MW)", 
            "Eolien (MW)", "Solaire (MW)", "Hydraulique (MW)", "Bio√©nergies (MW)", "Pompage (MW)"
        ]
        if not csv_path.exists():
            st.error(f"Fichier CSV introuvable : {csv_path}")
            return None
        df = pd.read_csv(csv_path, sep=';', usecols=cols, low_memory=False)
        return df
    except Exception as e:
        st.error(f"Erreur lors de la lecture du fichier CSV : {e}")
        return None

# Chargement des donn√©es
df = load_data()

# Titre principal
st.title("‚ö° Pr√©diction de la consommation √©lectrique en France")

# Navigation
with st.sidebar:
    st.title("üóÇÔ∏è Navigation")
pages = ["üìò Introduction", "üîç Exploration des donn√©es", "üìä Analyse", "ü§ñ Mod√©lisation"]
page = st.sidebar.radio("Aller vers", pages)

# Page Introduction
if page == pages[0]:
    st.write("## üìò Introduction")
    st.write("")  # Espace visuel
    st.write("")  # Espace visuel
    st.write("""
        Cette application pr√©sente une analyse des donn√©es √©lectriques en France et une d√©monstration 
        de mod√®le de machine learning pour pr√©dire la consommation.
    """)
    st.write("")  # Espace visuel
    # üîπ Chargement et affichage de la vid√©o locale
    video_path = "20250309_0113_Blend Video_blend_01jnw3zxa8ebhtsdjmkk4m6j3r.mp4"  
    if os.path.exists(video_path):
        st.video(video_path, start_time=0)
    
        
    

# Page Exploration du jeu de donn√©es
elif page == pages[1]:
    st.write("## üîç Exploration")
    st.write("")  # Espace visuel
    if df is not None:
        st.write("### Aper√ßu du dataset")
        st.dataframe(df.sample(10))
        st.write("")  # Espace visuel
        st.write("### Dimensions")
        st.write(f"Lignes : {df.shape[0]}, Colonnes : {df.shape[1]}")
        st.write("")  # Espace visuel
        st.write("### Statistiques descriptives")
        st.write(df.describe())
        st.write("")  # Espace visuel
        st.write("### Valeurs manquantes")
        missing_values = df.isna().sum()
        cols_with_na = missing_values[missing_values > 0]
        if not cols_with_na.empty:
            st.write(cols_with_na)
        else:
            st.write("Aucune valeur manquante d√©tect√©e.")
    else:
        st.error("Le dataset n'a pas pu √™tre charg√©.")

# Page Analyse et visualisations
elif page == pages[2]:
    st.write("## üìä Analyse")
    st.write("")  # Espace visuel
    st.write("")  # Espace visuel
    if df is not None:
        # Convertir les colonnes en num√©rique
        colonnes_production = ["Thermique (MW)", "Nucl√©aire (MW)", "Eolien (MW)", "Solaire (MW)", 
                               "Hydraulique (MW)", "Bio√©nergies (MW)", "Pompage (MW)"]
        for col in colonnes_production:
            df[col] = pd.to_numeric(df[col], errors='coerce')
        
        df["Production_Totale"] = df[colonnes_production].sum(axis=1)
        df["Date - Heure"] = pd.to_datetime(df["Date - Heure"], errors="coerce")
        st.write("")  # Espace visuel
        # Comparaison production vs consommation
        st.write("## Production vs Consommation")
        comparaison = df[["Date - Heure", "Production_Totale", "Consommation (MW)"]].set_index("Date - Heure")
        comparaison_annuelle = comparaison.resample("Y").mean()

        fig, ax = plt.subplots(figsize=(10, 5))
        comparaison_annuelle.plot(kind="bar", ax=ax, color=["blue", "orange"])
        ax.set_xlabel("Ann√©e")
        ax.set_ylabel("Moyenne annuelle (MW)")
        st.pyplot(fig)
        st.write("")  # Espace visuel
        st.write("")  # Espace visuel
        st.write("")  # Espace visuel

        # Matrice de corr√©lation
        st.write("## Corr√©lation")
        colonnes_analyse = ["Consommation (MW)", "Production_Totale"] + colonnes_production
        correlation_matrix = df[colonnes_analyse].corr()

        fig, ax = plt.subplots(figsize=(10, 5))
        sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm", center=0, ax=ax)
        st.pyplot(fig)
        st.write("")  # Espace visuel
        st.write("")  # Espace visuel
        st.write("### Justification des variables utilis√©es pour pr√©dire la consommation")
        st.write("")  # Espace visuel
        st.write("""
         S√©lection des Variables pour la Mod√©lisation

La matrice de corr√©lation montre que les diff√©rentes sources de production d'√©nergie entretiennent des relations vari√©es avec la consommation.  
Nous avons s√©lectionn√© les variables suivantes pour la pr√©diction de la consommation √©nerg√©tique :  
**Thermique**, **Nucl√©aire**, **√âolien**, **Solaire**, **Hydraulique**, **Bio√©nergies**, et **Pompage**.

#### 1. Variables fortement corr√©l√©es √† la consommation
Certaines sources de production montrent une corr√©lation significative avec la consommation :  
- Les **bio√©nergies** (corr√©lation : **0.59**),  
- L'**hydraulique** (corr√©lation : **0.44**),  
- Le **thermique** (corr√©lation : **0.33**).  

Ces variables contribuent directement √† expliquer les variations de la consommation.

#### 2. Production nucl√©aire
La **production nucl√©aire** est stable mais reste un facteur cl√© avec une corr√©lation de **0.21**.

#### 3. √ânergies renouvelables et variations saisonni√®res
Bien que les √©nergies renouvelables pr√©sentent des corr√©lations plus faibles, elles capturent efficacement les variations saisonni√®res :  
- **√âolien** (corr√©lation : **0.059**),  
- **Solaire** (corr√©lation : **0.04**).

#### 4. Effet du pompage et stockage d'√©nergie
La variable **Pompage** a une corr√©lation n√©gative (**-0.19**), ce qui refl√®te son r√¥le dans le stockage d'√©nergie, entra√Ænant un effet inverse sur la consommation.

#### Conclusion
Ces variables permettent de repr√©senter les dynamiques complexes entre production et consommation √©nerg√©tique, tout en prenant en compte les variations saisonni√®res, les fluctuations de production et les effets li√©s au stockage d'√©nergie. Ce choix am√©liore la pr√©cision des pr√©dictions du mod√®le.
""")


                 
    else:
        st.error("Les donn√©es n'ont pas pu √™tre charg√©es.")

elif page == pages[3]:
    st.subheader("ü§ñ Mod√©lisation")
    st.write("")  # Espace visuel
    st.write("")  # Espace visuel
    
    if df is not None:
        predictions_file = "predictions_2019.csv"
        
        # üìå Pr√©parer les donn√©es
        X_production = df[["Thermique (MW)", "Nucl√©aire (MW)", "Eolien (MW)", "Solaire (MW)", 
                           "Hydraulique (MW)", "Bio√©nergies (MW)", "Pompage (MW)"]]
        X_production = X_production.replace(['ND', '-'], 0).fillna(0)

        # üìå Chargement des pr√©dictions 2019
        if os.path.exists(predictions_file):
            df_filtered = pd.read_csv(predictions_file, parse_dates=["Date - Heure"])
        else:
            st.error("Le fichier de pr√©dictions 2019 n'a pas √©t√© trouv√©.")
            df_filtered = pd.DataFrame()

        # üìå Affichage des r√©sultats 2019
        if not df_filtered.empty:
            st.subheader("üìä Comparaison entre consommation r√©elle et pr√©dite (2019)")
            df_filtered["Mois"] = df_filtered["Date - Heure"].dt.to_period("M")
            df_grouped = df_filtered.groupby("Mois")[["Consommation (MW)", "Consommation Pr√©dite"]].mean().reset_index()

            fig, ax = plt.subplots(figsize=(10, 6))
            ax.bar(df_grouped["Mois"].astype(str), df_grouped["Consommation (MW)"], width=0.4, label="Consommation r√©elle", color="blue", align='center')
            ax.bar(df_grouped["Mois"].astype(str), df_grouped["Consommation Pr√©dite"], width=0.4, label="Consommation pr√©dite", color="orange", align='edge')
            ax.set_xlabel("Mois")
            ax.set_ylabel("Consommation moyenne (MW)")
            ax.set_title("Comparaison entre consommation r√©elle et pr√©dite par mois (2019)")
            ax.legend(loc="upper right")
            plt.xticks(rotation=45)
            ax.grid(True, linestyle='--', alpha=0.5)
            st.pyplot(fig)

            # üìå Affichage des m√©triques
            df_eval = df_filtered[["Consommation (MW)", "Consommation Pr√©dite"]].dropna()
            mse = mean_squared_error(df_eval["Consommation (MW)"], df_eval["Consommation Pr√©dite"])
            r2 = r2_score(df_eval["Consommation (MW)"], df_eval["Consommation Pr√©dite"])
            st.write(f"üìâ **Erreur quadratique moyenne (MSE) :** {mse:.2f}")
            st.write(f"üìà **Score R¬≤ :** {r2:.2f}")

    # üìå CHARGEMENT DES PR√âDICTIONS XGBoost POUR 2030
            try:
                df_pred = pd.read_csv("predictions_2030.csv", encoding="utf-8", sep=",")  # Charger le fichier

                # ‚úÖ Renommer correctement les colonnes
                df_pred.rename(columns={'Date': 'date', 'Pr√©vision Consommation (MW)': 'xgboost'}, inplace=True)

                # ‚úÖ Convertir la colonne date en datetime
                df_pred['date'] = pd.to_datetime(df_pred['date'])

                # V√©rification des colonnes apr√®s renommage
                print("üîç Colonnes apr√®s renommage :", df_pred.columns.tolist())

            except FileNotFoundError:
                st.error("‚ùå Fichier `predictions_2030.csv` introuvable.")
                df_pred = None


    # üîÆ Gros titre pour la section pr√©dictions mensuelles jusqu'en 2030
    st.markdown("""
        <h1 style="text-align: center; color: #1E3A8A; font-size: 36px;">
            üîÆ Projection √ânerg√©tique : Pr√©dictions Mensuelles Jusqu‚Äôen 2030 ‚ö°
        </h1>
    """, unsafe_allow_html=True)

    if df_pred is not None:
        # üìå S√©lection d'une ann√©e (2024-2030)
        year_selected = st.selectbox("üìÖ S√©lectionnez une ann√©e :", list(range(2024, 2031)))

        # üìå S√©lection d'un mois
        month_selected = st.selectbox("üìÜ S√©lectionnez un mois :", list(range(1, 13)))

        # üìå Filtrer les pr√©dictions pour le mois et l'ann√©e s√©lectionn√©s
        filtered_df = df_pred[
            (df_pred['date'].dt.year == year_selected) & 
            (df_pred['date'].dt.month == month_selected)
        ]

        # üìå Affichage de la pr√©vision
        if not filtered_df.empty:
            pred_value = filtered_df['xgboost'].values[0]
            st.metric(label=f"üìä Pr√©diction XGBoost pour {month_selected}/{year_selected}", value=f"{pred_value:.2f} MW")
        else:
            st.warning("‚ö†Ô∏è Aucune donn√©e disponible pour ce mois/ann√©e.")

        # üìå Graphique des pr√©dictions mensuelles
        fig = px.line(
            df_pred,
            x='date',
            y='xgboost',
            labels={'date': "Date", 'xgboost': "Consommation (MW)"},
            title="üìä √âvolution des Pr√©dictions Mensuelles de Consommation (MW) - XGBoost",
            color_discrete_sequence=["#D97706"],  # Orange
        )
        st.plotly_chart(fig)
       
